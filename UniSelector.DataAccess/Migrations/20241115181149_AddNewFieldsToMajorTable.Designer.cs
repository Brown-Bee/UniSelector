// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniSelector.DataAccess.Data;

#nullable disable

namespace UniSelector.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115181149_AddNewFieldsToMajorTable")]
    partial class AddNewFieldsToMajorTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniSelector.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("CivilID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CivilIDExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<bool>("HasAptitudeTest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFourYearExperience")
                        .HasColumnType("bit");

                    b.Property<int?>("HighSchoolGraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("HighSchoolType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("IELTS")
                        .HasColumnType("real");

                    b.Property<bool>("IsPublicSchool")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MothersNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TOEFL")
                        .HasColumnType("real");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UniSelector.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Scifi"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "History"
                        });
                });

            modelBuilder.Entity("UniSelector.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StandardFacultyId")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StandardFacultyId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniSelector.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageStartingSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<float>("EmploymentRate")
                        .HasColumnType("real");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("MarketDemand")
                        .HasColumnType("int");

                    b.Property<float>("MinimumGrade")
                        .HasColumnType("real");

                    b.Property<float?>("MinimumIELTS")
                        .HasColumnType("real");

                    b.Property<float?>("MinimumTOEFL")
                        .HasColumnType("real");

                    b.Property<bool>("RequiresAptitudeTest")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresBiology")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresChemistry")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresMath")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresScience")
                        .HasColumnType("bit");

                    b.Property<int>("StandardMajorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StandardMajorId");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("UniSelector.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Billy Spark",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "SWD9999001",
                            ImageUrl = "",
                            ListPrice = 99.0,
                            Price = 90.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            Title = "Fortune of Time"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Nancy Hoover",
                            CategoryId = 1,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "CAW777777701",
                            ImageUrl = "",
                            ListPrice = 40.0,
                            Price = 30.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Title = "Dark Skies"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Julian Button",
                            CategoryId = 3,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "RITO5555501",
                            ImageUrl = "",
                            ListPrice = 55.0,
                            Price = 50.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            Title = "Vanish in the Sunset"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Abby Muscles",
                            CategoryId = 3,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "WS3333333301",
                            ImageUrl = "",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            Title = "Cotton Candy"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Ron Parker",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "SOTJ1111111101",
                            ImageUrl = "",
                            ListPrice = 30.0,
                            Price = 27.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Title = "Rock in the Ocean"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Laura Phantom",
                            CategoryId = 1,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "FOT000000001",
                            ImageUrl = "",
                            ListPrice = 25.0,
                            Price = 23.0,
                            Price100 = 20.0,
                            Price50 = 22.0,
                            Title = "Leaves and Wonders"
                        });
                });

            modelBuilder.Entity("UniSelector.Models.StandardFaculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StandardFaculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameArabic = "كلية الهندسة",
                            NameEnglish = "College of Engineering"
                        },
                        new
                        {
                            Id = 2,
                            NameArabic = "كلية الطب",
                            NameEnglish = "College of Medicine"
                        },
                        new
                        {
                            Id = 3,
                            NameArabic = "كلية العلوم",
                            NameEnglish = "College of Science"
                        },
                        new
                        {
                            Id = 4,
                            NameArabic = "كلية إدارة الأعمال",
                            NameEnglish = "College of Business Administration"
                        },
                        new
                        {
                            Id = 5,
                            NameArabic = "كلية الآداب",
                            NameEnglish = "College of Arts"
                        },
                        new
                        {
                            Id = 6,
                            NameArabic = "كلية التربية",
                            NameEnglish = "College of Education"
                        },
                        new
                        {
                            Id = 7,
                            NameArabic = "كلية الشريعة والدراسات الإسلامية",
                            NameEnglish = "College of Sharia and Islamic Studies"
                        },
                        new
                        {
                            Id = 8,
                            NameArabic = "كلية الحقوق",
                            NameEnglish = "College of Law"
                        },
                        new
                        {
                            Id = 9,
                            NameArabic = "كلية العلوم الاجتماعية",
                            NameEnglish = "College of Social Sciences"
                        },
                        new
                        {
                            Id = 10,
                            NameArabic = "كلية طب الأسنان",
                            NameEnglish = "College of Dentistry"
                        },
                        new
                        {
                            Id = 11,
                            NameArabic = "كلية الصيدلة",
                            NameEnglish = "College of Pharmacy"
                        },
                        new
                        {
                            Id = 12,
                            NameArabic = "كلية العلوم الطبية المساعدة",
                            NameEnglish = "College of Allied Health Sciences"
                        },
                        new
                        {
                            Id = 13,
                            NameArabic = "كلية العمارة",
                            NameEnglish = "College of Architecture"
                        },
                        new
                        {
                            Id = 14,
                            NameArabic = "كلية علوم وهندسة الحاسوب",
                            NameEnglish = "College of Computing Sciences and Engineering"
                        },
                        new
                        {
                            Id = 15,
                            NameArabic = "كلية الصحة العامة",
                            NameEnglish = "College of Public Health"
                        },
                        new
                        {
                            Id = 16,
                            NameArabic = "كلية العلوم الحياتية",
                            NameEnglish = "College of Life Sciences"
                        },
                        new
                        {
                            Id = 17,
                            NameArabic = "كلية الدراسات العليا",
                            NameEnglish = "College of Graduate Studies"
                        },
                        new
                        {
                            Id = 18,
                            NameArabic = "كلية التمريض",
                            NameEnglish = "College of Nursing"
                        },
                        new
                        {
                            Id = 19,
                            NameArabic = "كلية الدراسات الإسلامية",
                            NameEnglish = "College of Islamic Studies"
                        },
                        new
                        {
                            Id = 20,
                            NameArabic = "كلية الفنون والإعلام",
                            NameEnglish = "College of Arts and Media"
                        });
                });

            modelBuilder.Entity("UniSelector.Models.StandardMajor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardFacultyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StandardFacultyId");

                    b.ToTable("StandardMajors");
                });

            modelBuilder.Entity("UniSelector.Models.StudentRequest", b =>
                {
                    b.Property<int>("StudentRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentRequestId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("IELTS")
                        .HasColumnType("real");

                    b.Property<bool?>("KUAcademicAptitudeTests")
                        .HasColumnType("bit");

                    b.Property<float?>("TOEFL")
                        .HasColumnType("real");

                    b.Property<int>("UnibersityId")
                        .HasColumnType("int");

                    b.HasKey("StudentRequestId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UnibersityId");

                    b.ToTable("StudetsRequests");
                });

            modelBuilder.Entity("UniSelector.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KuwaitRank")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 4500m,
                            FullDescription = "A leading open education institution in the Arab world.",
                            ImageUrl = "/images/University/AOU.png",
                            KuwaitRank = 1,
                            Name = "Arab Open University (AOU)",
                            PhoneNumber = "99999999",
                            SmallDescription = "",
                            location = "العارضية-Ardya",
                            type = "Private"
                        },
                        new
                        {
                            Id = 2,
                            Budget = 25000m,
                            FullDescription = "Offering American-style education with a Middle Eastern perspective.",
                            ImageUrl = "/images/University/AUM.png",
                            KuwaitRank = 2,
                            Name = "American University In Middle East (AUM)",
                            PhoneNumber = "99999999",
                            SmallDescription = "",
                            location = "العقيلة-Egila",
                            type = "Private"
                        },
                        new
                        {
                            Id = 3,
                            Budget = 15000m,
                            FullDescription = "Providing a comprehensive American liberal arts education.",
                            ImageUrl = "/images/University/AUK.png",
                            KuwaitRank = 3,
                            Name = "American University Of Kuwait (AUK)",
                            PhoneNumber = "99999999",
                            SmallDescription = "",
                            location = "السالمية-Salmya",
                            type = "Private"
                        },
                        new
                        {
                            Id = 4,
                            Budget = 13000m,
                            FullDescription = "The premier public institution of higher education in Kuwait.",
                            ImageUrl = "/images/university/KU.png",
                            KuwaitRank = 4,
                            Name = "Kuwait University (KU)",
                            PhoneNumber = "99999999",
                            SmallDescription = "",
                            location = "الشويخ-Shwaikh",
                            type = "Public"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniSelector.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniSelector.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniSelector.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniSelector.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniSelector.Models.Faculty", b =>
                {
                    b.HasOne("UniSelector.Models.StandardFaculty", "StandardFaculty")
                        .WithMany()
                        .HasForeignKey("StandardFacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniSelector.Models.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StandardFaculty");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniSelector.Models.Major", b =>
                {
                    b.HasOne("UniSelector.Models.Faculty", "Faculty")
                        .WithMany("Majors")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniSelector.Models.StandardMajor", "StandardMajor")
                        .WithMany()
                        .HasForeignKey("StandardMajorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("StandardMajor");
                });

            modelBuilder.Entity("UniSelector.Models.Product", b =>
                {
                    b.HasOne("UniSelector.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UniSelector.Models.StandardMajor", b =>
                {
                    b.HasOne("UniSelector.Models.StandardFaculty", "StandardFaculty")
                        .WithMany("StandardMajors")
                        .HasForeignKey("StandardFacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StandardFaculty");
                });

            modelBuilder.Entity("UniSelector.Models.StudentRequest", b =>
                {
                    b.HasOne("UniSelector.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniSelector.Models.University", "University")
                        .WithMany("AcceptedStudents")
                        .HasForeignKey("UnibersityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniSelector.Models.Faculty", b =>
                {
                    b.Navigation("Majors");
                });

            modelBuilder.Entity("UniSelector.Models.StandardFaculty", b =>
                {
                    b.Navigation("StandardMajors");
                });

            modelBuilder.Entity("UniSelector.Models.University", b =>
                {
                    b.Navigation("AcceptedStudents");

                    b.Navigation("Faculties");
                });
#pragma warning restore 612, 618
        }
    }
}
